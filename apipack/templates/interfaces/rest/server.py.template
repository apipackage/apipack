#!/usr/bin/env python3
"""
{{ project.name }} - REST API Server
Generated by APIpack

{% if project.description %}{{ project.description }}{% endif %}
"""

import logging
import asyncio
from typing import Dict, Any, Optional, List
from pathlib import Path
import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, File, Depends, status
from fastapi.responses import Response, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from pydantic import BaseModel, Field
import structlog

# Import function implementations
{% for func in functions %}
from functions.{{ func.name }} import {{ func.name }}
{% endfor %}

# Configure structured logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

# Pydantic models for request/response validation
{% for func in functions %}
class {{ func.name | pascal_case }}Request(BaseModel):
    {% for param in func.parameters %}
    {{ param.name }}: {{ param.type | format_type(language) }}{% if not param.required %} = {{ param.default | default('None') }}{% endif %}{% if param.description %} = Field(description="{{ param.description }}"){% endif %}
    {% endfor %}

class {{ func.name | pascal_case }}Response(BaseModel):
    result: {{ func.output_type | format_type(language) }}
    metadata: Optional[Dict[str, Any]] = None
    processing_time: Optional[float] = None

{% endfor %}

# Error response models
class ErrorResponse(BaseModel):
    error: str
    detail: Optional[str] = None
    error_code: Optional[str] = None

# Health check model
class HealthResponse(BaseModel):
    status: str
    version: str
    uptime: float
    checks: Dict[str, str]

# Initialize FastAPI app
app = FastAPI(
    title="{{ project.name }}",
    description="{{ project.description }}",
    version="{{ project.version | default('1.0.0') }}",
    openapi_url="/openapi.json",
    docs_url=None,  # Custom docs endpoint
    redoc_url=None,  # Custom redoc endpoint
)

# Add middleware
app.add_middleware(GZipMiddleware, minimum_size=1000)
{% if rest.cors_enabled %}
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)
{% endif %}

# Global exception handler
@app.exception_handler(Exception)
async def global_exception_handler(request, exc):
    logger.error("Unhandled exception", exc_info=exc, path=request.url.path)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content=ErrorResponse(
            error="Internal server error",
            detail=str(exc) if app.debug else "An unexpected error occurred"
        ).dict()
    )

# Health check endpoint
@app.get("/health", response_model=HealthResponse, tags=["Health"])
async def health_check():
    """Health check endpoint for monitoring and load balancers."""
    import time
    import psutil

    checks = {
        "database": "ok",  # Add actual database check if needed
        "memory": f"{psutil.virtual_memory().percent:.1f}%",
        "disk": f"{psutil.disk_usage('/').percent:.1f}%",
    }

    return HealthResponse(
        status="healthy",
        version="{{ project.version | default('1.0.0') }}",
        uptime=time.time() - app.state.start_time,
        checks=checks
    )

# Metrics endpoint
@app.get("/metrics", tags=["Monitoring"])
async def metrics():
    """Prometheus-compatible metrics endpoint."""
    import time
    import psutil

    metrics_data = f"""
# HELP http_requests_total Total HTTP requests
# TYPE http_requests_total counter
http_requests_total{{method="GET",endpoint="/health"}} {app.state.health_requests}

# HELP memory_usage_percent Memory usage percentage
# TYPE memory_usage_percent gauge
memory_usage_percent {psutil.virtual_memory().percent}

# HELP uptime_seconds Application uptime in seconds
# TYPE uptime_seconds gauge
uptime_seconds {time.time() - app.state.start_time}
"""
    return Response(content=metrics_data, media_type="text/plain")

# Custom documentation endpoints
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=f"{app.title} - Swagger UI",
    )

@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=f"{app.title} - ReDoc",
    )

{% for func in functions %}
# {{ func.name | pascal_case }} endpoint
@app.{{ func.rest_config.method.lower() if func.rest_config else 'post' }}(
    "{{ func.rest_config.path if func.rest_config else ('/' + func.name) }}",
    response_model={{ func.name | pascal_case }}Response,
    tags=["{{ interface_type | title }}"],
    summary="{{ func.description or func.name }}",
    description="{{ func.description or ('Execute ' + func.name + ' function') }}"
)
async def {{ func.name }}_endpoint(
    {% if func.rest_config and func.rest_config.method.upper() == 'POST' %}
    {% if func.input_type == 'bytes' %}
    file: UploadFile = File(..., description="Input file")
    {% else %}
    request: {{ func.name | pascal_case }}Request
    {% endif %}
    {% endif %}
):
    """
    {{ func.description or ('Execute ' + func.name + ' function') }}

    {% if func.examples %}
    Examples:
    {% for example in func.examples %}
    - Input: {{ example.input }}
      Output: {{ example.output }}
    {% endfor %}
    {% endif %}
    """
    import time
    start_time = time.time()

    try:
        logger.info("Processing request", function="{{ func.name }}")

        {% if func.rest_config and func.rest_config.method.upper() == 'POST' %}
        {% if func.input_type == 'bytes' %}
        # Handle file upload
        if file.size > {{ settings.max_file_size | default('50 * 1024 * 1024') }}:
            raise HTTPException(
                status_code=status.HTTP_413_REQUEST_ENTITY_TOO_LARGE,
                detail="File too large"
            )

        file_content = await file.read()
        result = await asyncio.to_thread({{ func.name }}, file_content)
        {% else %}
        # Handle JSON request
        result = await asyncio.to_thread({{ func.name }}, **request.dict())
        {% endif %}
        {% else %}
        # Handle GET request
        result = await asyncio.to_thread({{ func.name }})
        {% endif %}

        processing_time = time.time() - start_time

        logger.info(
            "Request processed successfully",
            function="{{ func.name }}",
            processing_time=processing_time
        )

        return {{ func.name | pascal_case }}Response(
            result=result,
            processing_time=processing_time,
            metadata={
                "function": "{{ func.name }}",
                "timestamp": time.time(),
                "version": "{{ project.version | default('1.0.0') }}"
            }
        )

    except Exception as e:
        processing_time = time.time() - start_time

        logger.error(
            "Request processing failed",
            function="{{ func.name }}",
            error=str(e),
            processing_time=processing_time,
            exc_info=True
        )

        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=ErrorResponse(
                error="Function execution failed",
                detail=str(e),
                error_code="{{ func.name }}_error"
            ).dict()
        )

{% endfor %}

# Application lifecycle events
@app.on_event("startup")
async def startup_event():
    """Initialize application state on startup."""
    import time

    app.state.start_time = time.time()
    app.state.health_requests = 0

    logger.info(
        "Application started",
        name="{{ project.name }}",
        version="{{ project.version | default('1.0.0') }}"
    )

@app.on_event("shutdown")
async def shutdown_event():
    """Cleanup on application shutdown."""
    logger.info("Application shutting down")

# Rate limiting middleware (if enabled)
{% if rest.rate_limiting and rest.rate_limiting.enabled %}
from slowapi import Limiter, _rate_limit_exceeded_handler
from slowapi.util import get_remote_address
from slowapi.errors import RateLimitExceeded

limiter = Limiter(key_func=get_remote_address)
app.state.limiter = limiter
app.add_exception_handler(RateLimitExceeded, _rate_limit_exceeded_handler)

# Apply rate limiting to endpoints
{% for func in functions %}
@limiter.limit("{{ rest.rate_limiting.requests_per_minute | default(60) }}/minute")
def {{ func.name }}_rate_limited():
    pass
{% endfor %}
{% endif %}

# Main server configuration
def create_app() -> FastAPI:
    """Factory function to create FastAPI application."""
    return app

def main():
    """Main entry point for running the server."""
    import os

    host = os.getenv("HOST", "{{ rest.host | default('0.0.0.0') }}")
    port = int(os.getenv("PORT", "{{ rest.port | default(8080) }}"))
    workers = int(os.getenv("WORKERS", "1"))
    log_level = os.getenv("LOG_LEVEL", "{{ settings.logging_level | default('info') }}").lower()

    logger.info(
        "Starting server",
        host=host,
        port=port,
        workers=workers,
        log_level=log_level
    )

    uvicorn.run(
        "server:app",
        host=host,
        port=port,
        workers=workers,
        log_level=log_level,
        access_log=True,
        reload=os.getenv("DEVELOPMENT", "false").lower() == "true"
    )

if __name__ == "__main__":
    main()