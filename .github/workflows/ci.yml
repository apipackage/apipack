name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION_DEFAULT: "3.11"
  
jobs:
  # Code Quality Checks
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          
      - name: Code formatting check (black)
        run: black --check --diff apipack tests
        
      - name: Import sorting check (isort)
        run: isort --check-only --diff apipack tests
        
      - name: Linting (flake8)
        run: flake8 apipack tests
        
      - name: Type checking (mypy)
        run: mypy apipack --strict
        
      - name: Security check (bandit)
        run: bandit -r apipack -f json -o bandit-report.json || true
        
      - name: Dependency vulnerability check (safety)
        run: safety check --json --output safety-report.json || true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: "3.8"
          - os: macos-latest
            python-version: "3.8"
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=apipack --cov-report=xml --cov-report=html
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        if: matrix.python-version == env.PYTHON_VERSION_DEFAULT && matrix.os == 'ubuntu-latest'
        with:
          name: coverage-report
          path: htmlcov/

  # Integration Tests with Ollama
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      # We'll start Ollama in a separate step due to complexity
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION_DEFAULT }}
          
      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.ai/install.sh | sh
          
      - name: Start Ollama service
        run: |
          ollama serve &
          sleep 10
          
      - name: Pull Mistral model
        run: |
          ollama pull mistral:7b
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --slow
        env:
          OLLAMA_HOST: http://localhost:11434
          
      - name: Run end-to-end tests
        run: |
          pytest tests/e2e/ -v --slow
        env:
          OLLAMA_HOST: http://localhost:11434

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps: